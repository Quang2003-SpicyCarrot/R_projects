knitr::opts_chunk$set(echo = TRUE)
length(red.mat[,ncol(red.mat)])
knitr::opts_chunk$set(echo = TRUE)
length(red.mat[,ncol(red.mat)])
knitr::opts_chunk$set(echo = TRUE)
table(red.kmeans$cluster, red.mat[,ncol(red.mat)])
knitr::opts_chunk$set(echo = TRUE)
length((red.mat[,ncol(red.mat)])
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
length(red.mat[,ncol(red.mat)])
knitr::opts_chunk$set(echo = TRUE)
length(red.mat[ncol(red.mat),])
knitr::opts_chunk$set(echo = TRUE)
nrow(red.mat)
knitr::opts_chunk$set(echo = TRUE)
ncol(red.mat)
knitr::opts_chunk$set(echo = TRUE)
ncol(red.mat[,ncol(redmat)])
knitr::opts_chunk$set(echo = TRUE)
ncol(red.mat[,ncol(red.mat)])
knitr::opts_chunk$set(echo = TRUE)
#visualise the clusters
mds2.full_thread_content <- cmdscale(D)
plot(mds2.full_thread_content,
col = K$cluster,
pch = full_thread_content$thread_number)
knitr::opts_chunk$set(echo = TRUE)
SSW <- rep(0, 15)
SSB <- rep(0, 15)
for (a in 1:15) {
K <- kmeans(mds.full_thread_content, a, nstart = 20)
SSW[a] <- K$tot.withinss
SSB[a] <- K$betweenss
}
#plot results
plot(1:15, SSW, type = 'b', col = 'dark green')
lines(1:15, SSB, type = 'b', col = 'red')
knitr::opts_chunk$set(echo = TRUE)
#visualise the clusters
mds2.full_thread_content <- cmdscale(D)
plot(mds2.full_thread_content,
col = K$cluster,
pch = full_thread_content$thread_number)
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2'),
fill = c(1,2),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
knitr::opts_chunk$set(echo = TRUE)
#visualise the clusters
mds2.full_thread_content <- cmdscale(D)
plot(mds2.full_thread_content,
col = K$cluster,
pch = full_thread_content$thread_number)
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2'),
fill = c(1,2),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
knitr::opts_chunk$set(echo = TRUE)
length(full_thread_content$thread_number)
knitr::opts_chunk$set(echo = TRUE)
#Create a term document matrix
red.tdm <- TermDocumentMatrix(corpus)
knitr::opts_chunk$set(echo = TRUE)
red.tdm <- t(as.matrix(red.tdm))
knitr::opts_chunk$set(echo = TRUE)
length(red.tdm)
knitr::opts_chunk$set(echo = TRUE)
nrow(red.tdm)
knitr::opts_chunk$set(echo = TRUE)
length(full_thread_content$thread_number)
knitr::opts_chunk$set(echo = TRUE)
#normalise to unit length
norm.red.tdm_nolabel <- diag(1/sqrt(rowSums(red.tdm_nolabel^2))) %*% red.tdm_nolabel
#create distance matrix
D.tdm <- dist(norm.red.tdm_nolabel, method = 'euclidean')^2/2
red.mds <- cmdscale(D.tdm)
knitr::opts_chunk$set(echo = TRUE)
SSW <- rep(0, 15)
SSB <- rep(0, 15)
for (a in 1:15) {
K.red <- kmeans(red.mds, a, nstart = 20)
SSW[a] <- K.red$tot.withinss
SSB[a] <- K.red$betweenss
}
#plot results
plot(1:15, SSW, type = 'b', col = 'dark green')
lines(1:15, SSB, type = 'b', col = 'red')
knitr::opts_chunk$set(echo = TRUE)
SSW <- rep(0, 15)
SSB <- rep(0, 15)
for (a in 1:15) {
K.red <- kmeans(red.mds, a, nstart = 20)
SSW[a] <- K.red$tot.withinss
SSB[a] <- K.red$betweenss
}
#plot results
plot(1:15, SSW, type = 'b', col = 'dark green')
lines(1:15, SSB, type = 'b', col = 'red')
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
red.kmeans <- kmeans(red.mds, 3, nstart = 20)
knitr::opts_chunk$set(echo = TRUE)
plot(red.mds,
col = red.kmeans$cluster,
pch = red.mat[,ncol(red.mat)])
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2','cluster 3'),
fill = c(1,2,3),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
nrow(red.mat)
table(red.kmeans$cluster, red.mat[,ncol(red.mat)])
knitr::opts_chunk$set(echo = TRUE)
#normalise to unit length
norm.red.tdmw_nolabel <-
diag(1/sqrt(rowSums(red.tdmw_nolabel^2))) %*% red.tdmw_nolabel
knitr::opts_chunk$set(echo = TRUE)
#Create a term document matrix
red.tdmw <- TermDocumentMatrix(corpus)
red.tdmw <- weightTfIdf(red.tdmw)
red.tdmw <- t(as.matrix(red.tdmw))
red.tdmw <- cbind(red.tdmw,full_thread_content$thread_number) #labels each doc
red.tdmw_nolabel <- red.tdmw[,-ncol(red.tdmw)] #create another variable to store
#the tdm matrix without the labels. This will be used for K-means clutering.
#remove empty
empties <- which(rowSums(abs(red.tdmw_nolabel)) == 0)
red.matw <- red.tdmw[-empties,]
red.tdmw_nolabel <- red.tdmw_nolabel[-empties,] #we also remove empty row for
#this variable.
knitr::opts_chunk$set(echo = TRUE)
#normalise to unit length
norm.red.tdmw_nolabel <-
diag(1/sqrt(rowSums(red.tdmw_nolabel^2))) %*% red.tdmw_nolabel
#create a cosine distance matrix
D.weighted <- dist(norm.red.tdmw_nolabel, method = 'euclidean')^2/2
red.mds.weighted <- cmdscale(D.weighted)
knitr::opts_chunk$set(echo = TRUE)
SSW <- rep(0, 15)
SSB <- rep(0, 15)
for (a in 1:15) {
K.red.weighted <- kmeans(red.mds.weighted, a, nstart = 20)
SSW[a] <- K.red.weighted$tot.withinss
SSB[a] <- K.red.weighted$betweenss
}
#plot results
plot(1:15, SSW, type = 'b', col = 'dark green')
lines(1:15, SSB, type = 'b', col = 'red')
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
red.kmeans.weighted <- kmeans(red.mds.weighted, 5, nstart = 20)
knitr::opts_chunk$set(echo = TRUE)
plot(red.mds.weighted,
col = red.kmeans.weighted$cluster,
pch = red.matw[,ncol(red.matw)])
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2','cluster 3'),
fill = c(1,2,3),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
table(red.kmeans.weighted$cluster, red.matw[,ncol(red.matw)])
knitr::opts_chunk$set(echo = TRUE)
plot(red.mds.weighted,
col = red.kmeans.weighted$cluster,
pch = red.matw[,ncol(red.matw)])
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2','cluster 3'),
fill = c(1,2,3,4,5),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
table(red.kmeans.weighted$cluster, red.matw[,ncol(red.matw)])
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
red.kmeans.weighted <- kmeans(red.mds.weighted, 4, nstart = 20)
knitr::opts_chunk$set(echo = TRUE)
plot(red.mds.weighted,
col = red.kmeans.weighted$cluster,
pch = red.matw[,ncol(red.matw)])
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2','cluster 3'),
fill = c(1,2,3,4,5),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
table(red.kmeans.weighted$cluster, red.matw[,ncol(red.matw)])
knitr::opts_chunk$set(echo = TRUE)
#confusion matrix
table(full_thread_content$thread_number, K$cluster)
knitr::opts_chunk$set(echo = TRUE)
#perform K means
set.seed(1)
K.original <- kmeans(x = mds.full_thread_content, 2 , nstart = 10)
cat("Within Sum of Square: ", K.original$withinss,
"\nBetween Sum of Square: ",K.original$betweenss)
knitr::opts_chunk$set(echo = TRUE)
SSW <- rep(0, 15)
SSB <- rep(0, 15)
for (a in 1:15) {
K <- kmeans(mds.full_thread_content, a, nstart = 20)
SSW[a] <- K$tot.withinss
SSB[a] <- K$betweenss
}
#plot results
plot(1:15, SSW, type = 'b', col = 'dark green')
lines(1:15, SSB, type = 'b', col = 'red')
knitr::opts_chunk$set(echo = TRUE)
#perform K means
set.seed(1)
K.original <- kmeans(x = mds.full_thread_content, 2 , nstart = 10)
cat("Within Sum of Square: ", K.original$withinss,
"\nBetween Sum of Square: ",K.original$betweenss)
knitr::opts_chunk$set(echo = TRUE)
#confusion matrix
table(full_thread_content$thread_number, K.original$cluster)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
red.kmeans.weighted <- kmeans(red.mds.weighted, 4, nstart = 20)
knitr::opts_chunk$set(echo = TRUE)
#visualise the clusters
mds2.full_thread_content <- cmdscale(D)
plot(mds2.full_thread_content,
col = K$cluster,
pch = full_thread_content$thread_number)
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2'),
fill = c(1,2),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
knitr::opts_chunk$set(echo = TRUE)
#visualise the clusters
plot(mds.full_thread_content,
col = K.original$cluster,
pch = full_thread_content$thread_number)
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2'),
fill = c(1,2),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
knitr::opts_chunk$set(echo = TRUE)
plot(red.mds,
col = red.kmeans$cluster,
pch = red.mat[,ncol(red.mat)])
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2','cluster 3'),
fill = c(1,2,3),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
knitr::opts_chunk$set(echo = TRUE)
plot(red.mds.weighted,
col = red.kmeans.weighted$cluster,
pch = red.matw[,ncol(red.matw)])
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2','cluster 3', 'cluster 4'),
fill = c(1,2,3,4),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
knitr::opts_chunk$set(echo = TRUE)
plot(red.mds,
col = red.kmeans$cluster,
pch = red.mat[,ncol(red.mat)])
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2','cluster 3'),
fill = c(1,2,3),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
knitr::opts_chunk$set(echo = TRUE)
#confusion matrix
table(full_thread_content$thread_number, K.original$cluster)
knitr::opts_chunk$set(echo = TRUE)
plot(red.mds.weighted,
col = red.kmeans.weighted$cluster,
pch = red.matw[,ncol(red.matw)])
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2','cluster 3', 'cluster 4'),
fill = c(1,2,3,4),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
red.kmeans.weighted <- kmeans(red.mds.weighted, 3, nstart = 20)
knitr::opts_chunk$set(echo = TRUE)
plot(red.mds.weighted,
col = red.kmeans.weighted$cluster,
pch = red.matw[,ncol(red.matw)])
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2','cluster 3'),
fill = c(1,2,3),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
knitr::opts_chunk$set(echo = TRUE)
table(red.mat[,ncol(red.mat)], red.kmeans$cluster)
knitr::opts_chunk$set(echo = TRUE)
plot(red.mds,
col = red.kmeans$cluster,
pch = red.mat[,ncol(red.mat)])
legend(x = 'topright',
legend = c('cluster 1', 'cluster 2','cluster 3'),
fill = c(1,2,3),
border = 'black')
legend(x = 'right',
legend = c('thread_1','thread_2','thread_3'),
pch = c(1,2,3))
knitr::opts_chunk$set(echo = TRUE)
table(red.mat[,ncol(red.mat)], red.kmeans$cluster)
knitr::opts_chunk$set(echo = TRUE)
table(red.kmeans.weighted$cluster, red.matw[,ncol(red.matw)])
knitr::opts_chunk$set(echo = TRUE)
table(red.mat[,ncol(red.mat)], red.kmeans$cluster)
knitr::opts_chunk$set(echo = TRUE)
table(red.mat[,ncol(red.mat)], red.kmeans$cluster)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
K <- kmeans(x = mds.full_thread_content, 3 , nstart = 10) #K-means
#confusion matrix
table(full_thread_content$thread_number, K$cluster)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
K <- kmeans(x = mds.full_thread_content, 3 , nstart = 10) #K-means
#confusion matrix
table(full_thread_content$thread_number, K$cluster)
knitr::opts_chunk$set(echo = TRUE)
confusionMatrix(table(red.mat[,ncol(red.mat)], red.kmeans$cluster))
knitr::opts_chunk$set(echo = TRUE)
table(red.mat[,ncol(red.mat)], red.kmeans$cluster)
knitr::opts_chunk$set(echo = TRUE)
sum(cm1)
knitr::opts_chunk$set(echo = TRUE)
cm1 <- table(red.mat[,ncol(red.mat)], red.kmeans$cluster)
cat("Accuracy Score: ", )
knitr::opts_chunk$set(echo = TRUE)
sum(cm1)
knitr::opts_chunk$set(echo = TRUE)
cm1 <- table(red.mat[,ncol(red.mat)], red.kmeans$cluster)
cat("Accuracy Score: ",
((cm1[1,1] + cm1[2,2] + cm1[3,3])/sum(cm1)))
knitr::opts_chunk$set(echo = TRUE)
cm1 <- table(red.mat[,ncol(red.mat)], red.kmeans$cluster)
cm1
knitr::opts_chunk$set(echo = TRUE)
#confusion matrix
cm0 <- table(full_thread_content$thread_number, K$cluster)
knitr::opts_chunk$set(echo = TRUE)
cm0
knitr::opts_chunk$set(echo = TRUE)
(cm0[3,1] + cm0[2,2] + cm0[1,3])/sum(cm0)
knitr::opts_chunk$set(echo = TRUE)
cat("Accuracy Score: ", ((cm1[3,1] + cm1[2,2] + cm1[1,3])/sum(cm1)))
knitr::opts_chunk$set(echo = TRUE)
cm1 <- table(red.mat[,ncol(red.mat)], red.kmeans$cluster)
cm1
cat("Accuracy Score: ", ((cm1[3,1] + cm1[2,2] + cm1[1,3])/sum(cm1)))
knitr::opts_chunk$set(echo = TRUE)
cm1 <- table(red.mat[,ncol(red.mat)], red.kmeans$cluster)
cm1
cat("Accuracy Score: ", ((cm1[1,1] + cm1[2,2] + cm1[3,3])/sum(cm1)))
knitr::opts_chunk$set(echo = TRUE)
cm1 <- table(red.mat[,ncol(red.mat)], red.kmeans$cluster)
cm1
cat("Accuracy Score: ", ((cm1[3,1] + cm1[2,2] + cm1[1,3])/sum(cm1)))
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
K <- kmeans(x = mds.full_thread_content, 3 , nstart = 10) #K-means
#confusion matrix
cm0 <- table(full_thread_content$thread_number, K$cluster)
(cm0[1,3] + cm0[2,2] + cm0[3,1])/sum(cm0)
knitr::opts_chunk$set(echo = TRUE)
#confusion matrix
cm0 <- table(full_thread_content$thread_number, K$cluster)
knitr::opts_chunk$set(echo = TRUE)
cm0
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
K <- kmeans(x = mds.full_thread_content, 3 , nstart = 10) #K-means
#confusion matrix
cm0 <- table(full_thread_content$thread_number, K$cluster)
cm0
cat("Accuracy Score: " ,(cm0[1,3] + cm0[2,2] + cm0[3,1])/sum(cm0))
knitr::opts_chunk$set(echo = TRUE)
#confusion matrix
cm <- table(full_thread_content$thread_number, K.original$cluster)
cm
cat("Accuracy Score: ", (cm[3,1] + cm[1:2,2])/sum(cm))
knitr::opts_chunk$set(echo = TRUE)
#confusion matrix
cm <- table(full_thread_content$thread_number, K.original$cluster)
cm
cat("Accuracy Score: ", (cm[3,1] + cm[2,2] + cm[1,2])/sum(cm))
knitr::opts_chunk$set(echo = TRUE)
#confusion matrix
cm <- table(full_thread_content$thread_number, K.original$cluster)
cm
cat("Accuracy Score: ", (cm[3,1] + cm[2,2])/sum(cm))
knitr::opts_chunk$set(echo = TRUE)
#confusion matrix
cm <- table(full_thread_content$thread_number, K.original$cluster)
cm
cat("Accuracy Score: ", (cm[3,1] + cm[2,2])/sum(cm))
cat("Accuracy Score: ", (sum(cm[1:2,2])/sum(cm)))
knitr::opts_chunk$set(echo = TRUE)
#confusion matrix
cm <- table(full_thread_content$thread_number, K.original$cluster)
cm
cat("Accuracy Score: ", (cm[3,1] + cm[2,2])/sum(cm))
cat("\nAccuracy Score: ", (sum(cm[1:2,2])/sum(cm)))
knitr::opts_chunk$set(echo = TRUE)
library(caret)
knitr::opts_chunk$set(echo = TRUE)
confusionMatrix(data = red.mat[,ncol(red.mat)],
reference = red.kmeans$cluster)
knitr::opts_chunk$set(echo = TRUE)
cm1 <- table(red.mat[,ncol(red.mat)], red.kmeans$cluster)
cm1
cat("Accuracy Score: ", ((cm1[3,1] + cm1[2,2] + cm1[1,3])/sum(cm1)))
knitr::opts_chunk$set(echo = TRUE)
cm2
knitr::opts_chunk$set(echo = TRUE)
cm2 <- table(red.kmeans.weighted$cluster, red.matw[,ncol(red.matw)])
knitr::opts_chunk$set(echo = TRUE)
cm2 <- table(red.kmeans.weighted$cluster, red.matw[,ncol(red.matw)])
knitr::opts_chunk$set(echo = TRUE)
cm2
knitr::opts_chunk$set(echo = TRUE)
cm2 <- table(red.matw[,ncol(red.matw)],red.kmeans.weighted$cluster,)
knitr::opts_chunk$set(echo = TRUE)
cm2 <- table(red.matw[,ncol(red.matw)],red.kmeans.weighted$cluster,)
knitr::opts_chunk$set(echo = TRUE)
cm2
knitr::opts_chunk$set(echo = TRUE)
cm2 <- table(red.matw[,ncol(red.matw)],red.kmeans.weighted$cluster)
knitr::opts_chunk$set(echo = TRUE)
cm2
knitr::opts_chunk$set(echo = TRUE)
cat("Accuracy Score: ", (cm2[3,1] + cm2[2,2] + cm2[1,3])/sum(cm2))
knitr::opts_chunk$set(echo = TRUE)
cm2 <- table(red.matw[,ncol(red.matw)],red.kmeans.weighted$cluster)
cm2
cat("Accuracy Score: ", (cm2[3,1] + cm2[2,2] + cm2[1,3])/sum(cm2))
knitr::opts_chunk$set(echo = TRUE)
SSW <- rep(0, 15)
SSB <- rep(0, 15)
for (a in 1:15) {
K.red.weighted <- kmeans(red.mds.weighted, a, nstart = 20)
SSW[a] <- K.red.weighted$tot.withinss
SSB[a] <- K.red.weighted$betweenss
}
#plot results
plot(1:15, SSW, type = 'b', col = 'dark green')
lines(1:15, SSB, type = 'b', col = 'red')
knitr::opts_chunk$set(echo = TRUE)
SSW <- rep(0, 15)
SSB <- rep(0, 15)
for (a in 1:15) {
K.red.weighted <- kmeans(red.mds.weighted, a, nstart = 20)
SSW[a] <- K.red.weighted$tot.withinss
SSB[a] <- K.red.weighted$betweenss
}
#plot results
plot(1:15, SSW, type = 'b', col = 'dark green')
lines(1:15, SSB, type = 'b', col = 'red')
knitr::opts_chunk$set(echo = TRUE)
SSW <- rep(0, 15)
SSB <- rep(0, 15)
for (a in 1:15) {
K.red.weighted <- kmeans(red.mds.weighted, a, nstart = 20)
SSW[a] <- K.red.weighted$tot.withinss
SSB[a] <- K.red.weighted$betweenss
}
#plot results
plot(1:15, SSW, type = 'b', col = 'dark green')
lines(1:15, SSB, type = 'b', col = 'red')
knitr::opts_chunk$set(echo = TRUE)
SSW <- rep(0, 15)
SSB <- rep(0, 15)
for (a in 1:15) {
K.red.weighted <- kmeans(red.mds.weighted, a, nstart = 20)
SSW[a] <- K.red.weighted$tot.withinss
SSB[a] <- K.red.weighted$betweenss
}
#plot results
plot(1:15, SSW, type = 'b', col = 'dark green')
lines(1:15, SSB, type = 'b', col = 'red')
knitr::opts_chunk$set(echo = TRUE)
cm2 <- table(red.matw[,ncol(red.matw)],red.kmeans.weighted$cluster)
cm2
cat("Accuracy Score: ", (cm2[3,1] + cm2[2,2] + cm2[1,3])/sum(cm2))
